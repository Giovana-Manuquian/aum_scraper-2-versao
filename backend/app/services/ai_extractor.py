"""
Servi√ßo de Extra√ß√£o de Dados via IA (GPT-4o) com Fallback Regex

Este servi√ßo implementa a extra√ß√£o de Patrim√¥nio Sob Gest√£o (AUM) usando OpenAI GPT-4o,
com sistema de fallback inteligente usando regex quando a IA falha.

FUNCIONALIDADES:
‚úÖ Extra√ß√£o de AUM via GPT-4o
‚úÖ Fallback com Regex quando OpenAI falha
‚úÖ Controle de tokens (‚â§ 1500 por requisi√ß√£o)
‚úÖ Normaliza√ß√£o de valores monet√°rios para float
‚úÖ Controle de budget di√°rio
‚úÖ Logs detalhados de uso
‚úÖ Padr√µes inteligentes de regex

ARQUITETURA:
- OpenAI GPT-4o para processamento principal
- Regex fallback para casos de falha
- Tiktoken para contagem de tokens
- Normaliza√ß√£o autom√°tica de valores
- Controle de custos e budget
- Sistema robusto com m√∫ltiplas estrat√©gias

FALLBACK COM REGEX:
- Padr√µes: "290 milh√µes sob cust√≥dia", "patrim√¥nio sob gest√£o"
- Normaliza√ß√£o: Converte para valores num√©ricos
- Score: 0.7 (menor que IA, mas confi√°vel)
- Ativa√ß√£o: Autom√°tica quando OpenAI falha
"""

import openai
import tiktoken
import re
import logging
from typing import Dict, Optional, Tuple
from decimal import Decimal
import os

logger = logging.getLogger(__name__)

class AIExtractorService:
    """
    Servi√ßo de extra√ß√£o de dados via IA
    
    Implementa extra√ß√£o de AUM usando GPT-4o com controle de budget
    e normaliza√ß√£o de valores monet√°rios conforme documento.
    """
    
    def __init__(self):
        """Inicializa o servi√ßo de IA com configura√ß√µes"""
        self.api_key = os.getenv("OPENAI_API_KEY")
        if not self.api_key:
            raise ValueError("OPENAI_API_KEY n√£o configurada")
        
        # Configura√ß√µes OpenAI
        openai.api_key = self.api_key
        
        # Configura√ß√µes de budget (conforme documento)
        self.max_tokens_per_request = 1500
        self.max_tokens_per_day = 100000
        self.budget_alert_threshold = 0.8  # 80%
        
        # Inicializa tokenizer
        try:
            self.tokenizer = tiktoken.encoding_for_model("gpt-4o")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao inicializar tokenizer: {e}")
            self.tokenizer = None
    
    def count_tokens(self, text: str) -> int:
        """
        Conta tokens em um texto usando Tiktoken
        
        Implementa controle de budget conforme documento
        """
        if not self.tokenizer:
            # Fallback: estimativa aproximada (1 token ‚âà 4 caracteres)
            return len(text) // 4
        
        try:
            return len(self.tokenizer.encode(text))
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro na contagem de tokens: {e}")
            return len(text) // 4
    
    def normalize_monetary_value(self, value_text: str) -> Tuple[Optional[float], Optional[str], Optional[str]]:
        """
        Normaliza valores monet√°rios para float padr√£o
        
        Implementa convers√£o conforme documento:
        - Converte "R$ 2,3 bi" para (2.3e9, "BRL", "bi")
        - Converte "US$ 1.5M" para (1.5e6, "USD", "M")
        - Retorna (valor_normalizado, moeda, unidade)
        """
        try:
            if not value_text or value_text.lower() in ['nao_disponivel', 'n/a', 'n√£o dispon√≠vel']:
                return None, None, None
            
            # Regex para valores monet√°rios (conforme documento)
            # Padr√£o: [R$US$] ?\d+[,.]\d+ \w+
            monetary_pattern = r'([R$US$])\s*(\d+[,.]\d+)\s*(\w+)'
            match = re.search(monetary_pattern, value_text, re.IGNORECASE)
            
            if not match:
                # Tenta padr√£o sem moeda
                simple_pattern = r'(\d+[,.]\d+)\s*(\w+)'
                match = re.search(simple_pattern, value_text)
                if match:
                    currency = "BRL"  # Padr√£o brasileiro
                    value_str = match.group(1)
                    unit = match.group(2)
                else:
                    return None, None, None
            else:
                currency_symbol = match.group(1)
                value_str = match.group(2)
                unit = match.group(3)
                
                # Mapeia s√≠mbolos para c√≥digos de moeda
                currency_map = {
                    'R$': 'BRL',
                    'US$': 'USD',
                    '$': 'USD'
                }
                currency = currency_map.get(currency_symbol, 'BRL')
            
            # Converte valor para float
            value_float = float(value_str.replace(',', '.'))
            
            # Normaliza unidade para multiplicador (conforme documento)
            unit_multipliers = {
                'bi': 1e9,      # Bilh√£o
                'b': 1e9,       # Bilh√£o (abreviado)
                'bilhao': 1e9,  # Bilh√£o (portugu√™s)
                'bilh√µes': 1e9, # Bilh√µes (portugu√™s)
                'mi': 1e6,      # Milh√£o
                'm': 1e6,       # Milh√£o (abreviado)
                'milhao': 1e6,  # Milh√£o (portugu√™s)
                'milh√µes': 1e6, # Milh√µes (portugu√™s)
                'k': 1e3,       # Mil (abreviado)
                'mil': 1e3,     # Mil (portugu√™s)
                'milhares': 1e3 # Milhares (portugu√™s)
            }
            
            # Aplica multiplicador
            normalized_value = value_float
            if unit.lower() in unit_multipliers:
                normalized_value = value_float * unit_multipliers[unit.lower()]
                unit = unit.lower()  # Normaliza unidade
            
            logger.info(f"üí∞ Valor normalizado: {value_text} ‚Üí {normalized_value} {currency} ({unit})")
            return normalized_value, currency, unit
            
        except Exception as e:
            logger.error(f"‚ùå Erro na normaliza√ß√£o de valor: {e}")
            return None, None, None
    
    async def extract_aum_from_text(self, company_name: str, text_chunks: list) -> Dict:
        """
        Extrai AUM de texto usando GPT-4o
        
        Implementa extra√ß√£o conforme documento:
        - Limita tokens a ‚â§ 1500 por requisi√ß√£o
        - Pergunta espec√≠fica sobre AUM
        - Normaliza valores monet√°rios
        - Controle de budget e custos
        """
        try:
            if not text_chunks:
                logger.warning("‚ö†Ô∏è Nenhum chunk de texto fornecido")
                return self._create_empty_result()
            
            # Constr√≥i prompt conforme documento
            prompt = self._build_aum_prompt(company_name, text_chunks)
            
            # Conta tokens do prompt
            prompt_tokens = self.count_tokens(prompt)
            if prompt_tokens > self.max_tokens_per_request:
                logger.warning(f"‚ö†Ô∏è Prompt muito longo: {prompt_tokens} tokens (limite: {self.max_tokens_per_request})")
                # Trunca chunks para caber no limite
                text_chunks = self._truncate_chunks_for_tokens(text_chunks, self.max_tokens_per_request - 200)
                prompt = self._build_aum_prompt(company_name, text_chunks)
                prompt_tokens = self.count_tokens(prompt)
            
            logger.info(f"ü§ñ Chamando OpenAI para {company_name} com {prompt_tokens} tokens")
            
            # Chama OpenAI GPT-4o
            response = openai.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {
                        "role": "system",
                        "content": "Voc√™ √© um assistente especializado em extrair informa√ß√µes financeiras de textos. Responda APENAS com o valor solicitado."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                max_tokens=100,
                temperature=0.1,
                top_p=1,
                frequency_penalty=0,
                presence_penalty=0
            )
            
            # Extrai resposta
            ai_response = response.choices[0].message.content.strip()
            usage = response.usage
            
            logger.info(f"‚úÖ Resposta da IA para {company_name}: {ai_response}")
            logger.info(f"üìä Tokens usados: {usage.total_tokens} (prompt: {usage.prompt_tokens}, completion: {usage.completion_tokens})")
            
            # Processa resposta da IA
            aum_value, currency, unit = self.normalize_monetary_value(ai_response)
            
            # Calcula score de confian√ßa baseado na resposta
            confidence_score = self._calculate_confidence_score(ai_response, aum_value)
            
            # Cria resultado
            result = {
                'aum_value': aum_value,
                'aum_currency': currency or 'BRL',
                'aum_unit': unit,
                'aum_text': ai_response,
                'confidence_score': confidence_score,
                'tokens_used': usage.total_tokens,
                'source_model': 'gpt-4o',
                'extraction_method': 'ai_gpt4o'
            }
            
            # Verifica budget
            self._check_budget_usage(usage.total_tokens)
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erro na extra√ß√£o de AUM para {company_name}: {e}")
            logger.info(f"üîÑ Tentando fallback com regex para {company_name}")
            
            # FALLBACK: Tenta extrair com regex quando OpenAI falha
            try:
                regex_result = self._extract_aum_with_regex(company_name, text_chunks)
                if regex_result and regex_result.get('aum_text') != 'NAO_DISPONIVEL':
                    logger.info(f"‚úÖ Fallback regex funcionou para {company_name}: {regex_result['aum_text']}")
                    return regex_result
                else:
                    logger.info(f"‚ö†Ô∏è Fallback regex n√£o encontrou AUM para {company_name}")
                    return self._create_empty_result()
            except Exception as regex_error:
                logger.error(f"‚ùå Fallback regex tamb√©m falhou para {company_name}: {regex_error}")
                return self._create_error_result(f"OpenAI: {str(e)} | Regex: {str(regex_error)}")
    
    def _extract_aum_with_regex(self, company_name: str, text_chunks: list) -> Dict:
        """
        Fallback: Extrai AUM usando regex quando OpenAI falha
        
        Implementa extra√ß√£o inteligente de valores monet√°rios:
        - Busca por padr√µes como "X milh√µes", "X bilh√µes"
        - Procura por "sob gest√£o", "cust√≥dia", "AUM"
        - Normaliza valores para formato padr√£o
        """
        try:
            if not text_chunks:
                return self._create_empty_result()
            
            # Concatena todos os chunks
            full_text = " ".join(text_chunks).lower()
            logger.info(f"üîç Analisando texto com regex para {company_name} ({len(full_text)} caracteres)")
            
            # Padr√µes espec√≠ficos para AUM
            aum_patterns = [
                # "290 milh√µes sob cust√≥dia" ou "290 milh√µes em cust√≥dia"
                r'(\d+(?:[,.]\d+)?)\s*(?:milh√µes?|milh√£o)\s+(?:sob\s+cust√≥dia|em\s+cust√≥dia|de\s+cust√≥dia)',
                # "R$ 2,3 bilh√µes sob gest√£o"
                r'R?\$?\s*(\d+(?:[,.]\d+)?)\s*(?:bilh√µes?|bilh√£o|milh√µes?|milh√£o)\s+(?:sob\s+gest√£o|em\s+gest√£o|de\s+gest√£o)',
                # "patrim√¥nio sob gest√£o de X milh√µes"
                r'patrim√¥nio\s+sob\s+gest√£o\s+(?:de\s+)?(\d+(?:[,.]\d+)?)\s*(?:milh√µes?|milh√£o|bilh√µes?|bilh√£o)',
                # "AUM de X bilh√µes"
                r'aum\s+(?:de\s+)?(\d+(?:[,.]\d+)?)\s*(?:bilh√µes?|bilh√£o|milh√µes?|milh√£o)',
                # "X milh√µes em ativos"
                r'(\d+(?:[,.]\d+)?)\s*(?:milh√µes?|milh√£o|bilh√µes?|bilh√£o)\s+(?:em\s+)?(?:ativos|gest√£o)',
                # Padr√£o gen√©rico: n√∫mero + unidade
                r'(\d+(?:[,.]\d+)?)\s*(?:milh√µes?|milh√£o|bilh√µes?|bilh√£o)'
            ]
            
            best_match = None
            best_pattern = None
            
            for i, pattern in enumerate(aum_patterns):
                matches = re.findall(pattern, full_text, re.IGNORECASE)
                if matches:
                    # Pega o primeiro match (mais espec√≠fico)
                    value_str = matches[0]
                    logger.info(f"üéØ Regex encontrou padr√£o {i+1}: '{value_str}' para {company_name}")
                    
                    # Determina a unidade baseada no padr√£o
                    if 'bilh√µes' in pattern or 'bilh√£o' in pattern:
                        unit = 'bi'
                    elif 'milh√µes' in pattern or 'milh√£o' in pattern:
                        unit = 'mi'
                    else:
                        unit = 'mi'  # Padr√£o
                    
                    best_match = value_str
                    best_pattern = i + 1
                    break
            
            if best_match:
                # Normaliza o valor
                try:
                    # Converte "2,3" para 2.3
                    value_float = float(best_match.replace(',', '.'))
                    
                    # Aplica multiplicador baseado na unidade
                    if unit == 'bi':
                        final_value = value_float * 1e9
                        unit_text = 'bilh√µes'
                    elif unit == 'mi':
                        final_value = value_float * 1e6
                        unit_text = 'milh√µes'
                    else:
                        final_value = value_float
                        unit_text = unit
                    
                    # Cria texto amig√°vel
                    aum_text = f"R$ {value_float} {unit_text}"
                    
                    logger.info(f"‚úÖ Regex extraiu AUM para {company_name}: {aum_text} (valor: {final_value})")
                    
                    return {
                        'aum_value': final_value,
                        'aum_currency': 'BRL',
                        'aum_unit': unit,
                        'aum_text': aum_text,
                        'confidence_score': 0.7,  # Score menor que IA, mas confi√°vel
                        'tokens_used': 0,
                        'source_model': 'regex_fallback',
                        'extraction_method': 'regex_pattern_matching'
                    }
                    
                except ValueError as ve:
                    logger.warning(f"‚ö†Ô∏è Erro ao converter valor '{best_match}' para {company_name}: {ve}")
                    return self._create_empty_result()
            
            # Se n√£o encontrou nada
            logger.info(f"‚ö†Ô∏è Regex n√£o encontrou padr√µes de AUM para {company_name}")
            return self._create_empty_result()
            
        except Exception as e:
            logger.error(f"‚ùå Erro no fallback regex para {company_name}: {e}")
            return self._create_empty_result()
    
    def _build_aum_prompt(self, company_name: str, text_chunks: list) -> str:
        """
        Constr√≥i prompt para GPT-4o conforme documento
        
        Implementa pergunta espec√≠fica sobre AUM com limite de tokens
        """
        chunks_text = "\n\n".join(text_chunks)
        
        prompt = f"""
Analise o texto abaixo e responda APENAS com o patrim√¥nio sob gest√£o (AUM) anunciado por {company_name}.

Responda SOMENTE com o n√∫mero e a unidade (ex: R$ 2,3 bi) ou NAO_DISPONIVEL.

Texto para an√°lise:
{chunks_text}

Resposta:"""
        
        return prompt.strip()
    
    def _truncate_chunks_for_tokens(self, chunks: list, max_tokens: int) -> list:
        """
        Trunca chunks para caber no limite de tokens
        
        Implementa controle de budget conforme documento
        """
        truncated_chunks = []
        current_tokens = 0
        
        for chunk in chunks:
            chunk_tokens = self.count_tokens(chunk)
            if current_tokens + chunk_tokens <= max_tokens:
                truncated_chunks.append(chunk)
                current_tokens += chunk_tokens
            else:
                # Adiciona parte do chunk se ainda couber
                remaining_tokens = max_tokens - current_tokens
                if remaining_tokens > 50:  # M√≠nimo √∫til
                    partial_chunk = chunk[:remaining_tokens * 4]  # Aproxima√ß√£o
                    truncated_chunks.append(partial_chunk)
                break
        
        logger.info(f"‚úÇÔ∏è Chunks truncados: {len(chunks)} ‚Üí {len(truncated_chunks)} (tokens: {current_tokens})")
        return truncated_chunks
    
    def _calculate_confidence_score(self, ai_response: str, aum_value: Optional[float]) -> float:
        """
        Calcula score de confian√ßa da extra√ß√£o
        
        Baseado na qualidade da resposta da IA
        """
        if not aum_value:
            return 0.0
        
        # Score base
        score = 0.5
        
        # B√¥nus para respostas bem formatadas
        if re.search(r'[R$US$]\s*\d+[,.]\d+\s*\w+', ai_response):
            score += 0.3
        
        # B√¥nus para valores num√©ricos v√°lidos
        if isinstance(aum_value, (int, float)) and aum_value > 0:
            score += 0.2
        
        return min(score, 1.0)
    
    def _check_budget_usage(self, tokens_used: int) -> None:
        """
        Verifica uso de budget e gera alertas
        
        Implementa controle de budget conforme documento
        """
        # Em uma implementa√ß√£o real, isso seria persistido no banco
        # Por enquanto, apenas loga
        logger.info(f"üí∞ Tokens usados nesta requisi√ß√£o: {tokens_used}")
        
        # Alerta se pr√≥ximo do limite
        if tokens_used > self.max_tokens_per_request * 0.8:
            logger.warning(f"‚ö†Ô∏è ATEN√á√ÉO: Requisi√ß√£o usou {tokens_used} tokens (80% do limite)")
    
    def _create_empty_result(self) -> Dict:
        """Cria resultado vazio para casos de erro"""
        return {
            'aum_value': None,
            'aum_currency': 'BRL',
            'aum_unit': None,
            'aum_text': 'NAO_DISPONIVEL',
            'confidence_score': 0.0,
            'tokens_used': 0,
            'source_model': None,
            'extraction_method': 'none'
        }
    
    def _create_error_result(self, error_message: str) -> Dict:
        """Cria resultado de erro"""
        return {
            'aum_value': None,
            'aum_currency': 'BRL',
            'aum_unit': None,
            'aum_text': f'ERRO: {error_message}',
            'confidence_score': 0.0,
            'tokens_used': 0,
            'source_model': None,
            'extraction_method': 'error'
        }
    
    def get_daily_usage_stats(self) -> Dict:
        """
        Retorna estat√≠sticas de uso de tokens do dia
        
        Implementa monitoramento de budget conforme documento
        """
        try:
            # Em uma implementa√ß√£o real, isso seria consultado do banco
            # Por enquanto, retorna valores padr√£o
            return {
                'tokens_used': 0,  # Seria somado do banco
                'tokens_limit': self.max_tokens_per_day,
                'usage_percentage': 0.0,
                'api_calls': 0,  # Seria contado do banco
                'budget_warning': False
            }
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter estat√≠sticas de uso: {e}")
            return {
                'tokens_used': 0,
                'tokens_limit': self.max_tokens_per_day,
                'usage_percentage': 0.0,
                'api_calls': 0,
                'budget_warning': False
            }
